pc <- prcomp(~ mpg + cyl + disp + hp + wt + qsec + am +
gear + carb,
data = mtcars,
center = TRUE,
scale = TRUE)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
library(pacman)
pacman::p_load(pacman,tidyverse)
# GGplot2 module 15 R
# INSTALL AND LOAD PACKAGES
library(pacman) # load package manager library to read json file
pacman::p_load(pacman,tidyverse,jsonlite,rio)
library(datasets)  # Load/unload base packages manually
pacman::p_load(pacman,tidyverse,jsonlite,rio,plotly)
install.packages('plotly')
install.packages("plotly")
# GGplot2 module 15 R
# INSTALL AND LOAD PACKAGES
library(pacman) # load package manager library to read json file
pacman::p_load(pacman,tidyverse,jsonlite,rio,plotly)
library(datasets)  # Load/unload base packages manually
head(mpg) # mpg contains fuel economy for vehicles manufactured btw 1999 -2008
## bar charts
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>%
group_by(manufacturer) %>%
summarize(Vehicle_Count=n(),
.groups = 'keep') #create summary table
mpg_summary
## visualize the results of mpg summary
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
require(pacman)
library(pacman) # load package manager library to read json file
pacman::p_load(pacman,tidyverse,jsonlite,rio,plotly)
library(datasets)  # Load/unload base packages manually
p_unload(dplyr, tidyr, stringr) # Clear specific packages
pacman::p_load(pacman,tidyverse,jsonlite,rio,plotly)
library(datasets)  # Load/unload base packages manually
head(mpg) # mpg contains fuel economy for vehicles manufactured btw 1999 -2008
## bar charts
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>%
group_by(manufacturer) %>%
summarize(Vehicle_Count=n(),
.groups = 'keep') #create summary table
library(tidyverse)
mpg_summary <- mpg %>%
group_by(manufacturer) %>%
summarize(Vehicle_Count=n(),
.groups = 'keep') #create summary table
pacman::p_load(pacman,tidyverse,jsonlite,rio,plotly,dplyr)
mpg_summary <- mpg %>%
group_by(manufacturer) %>%
summarize(Vehicle_Count=n(),
.groups = 'keep') #create summary table
mpg_summary
## visualize the results of mpg summary on barchart
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() +
xlab("Manufacturing Company") +
ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() +
xlab("Manufacturing Company") +
ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
# to compare the differences in average highway fuel economy (hwy) of Toyota vehicles
# as a function of the different cylinder sizes (cyl):
mpg_summary <- subset(mpg,manufacturer=="toyota") %>%
group_by(cyl) %>%
summarize(Mean_Hwy=mean(hwy),
.groups = 'keep') #create summary table
mpg_summary
plt <- ggplot(mpg_summary,
aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line() # plot a line plot
View(mpg_summary)
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(),
.groups = 'keep') #create summary table
mpg_summary
## visualize the results of mpg summary on barchart
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col()
+ xlab("Manufacturing Company")
+ ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() +
xlab("Manufacturing Company") +
ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() +
xlab("Manufacturing Company") +
ylab("Number of Vehicles in Dataset") + #plot a boxplot with labelstheme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
## Build a Line Plot in ggplot2
# to compare the differences in average highway fuel economy (hwy) of Toyota vehicles
# as a function of the different cylinder sizes (cyl):
mpg_summary <- subset(mpg,manufacturer=="toyota") %>%
group_by(cyl) %>%
summarize(Mean_Hwy=mean(hwy),
.groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(),
.groups = 'keep') #create summary table
mpg_summary
## visualize the results of mpg summary on barchart
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() +
xlab("Manufacturing Company") +
ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() +
xlab("Manufacturing Company") +
ylab("Number of Vehicles in Dataset") + #plot a boxplot with labelstheme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
## Build a Line Plot in ggplot2
# to compare the differences in average highway fuel economy (hwy) of Toyota vehicles
# as a function of the different cylinder sizes (cyl):
mpg_summary <- subset(mpg,manufacturer=="toyota") %>%
group_by(cyl) %>%
summarize(Mean_Hwy=mean(hwy),
.groups = 'keep') #create summary table
plt + geom_col() +
xlab("Manufacturing Company") +
ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_summary
# to compare the differences in average highway fuel economy (hwy) of Toyota vehicles
# as a function of the different cylinder sizes (cyl):
mpg_summary <- subset(mpg,manufacturer=="toyota") %>%
group_by(cyl) %>%
summarize(Mean_Hwy=mean(hwy),
.groups = 'keep') #create summary table
mpg_summary
plt <- ggplot(mpg_summary,
aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line() # plot a line plot
plt + geom_line()
plt + geom_line() +
scale_x_discrete(limits=c(4,6,8)) +
scale_y_continuous(breaks = c(15:30)) #add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() +
xlab("Engine Size (L)") +
ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt + geom_point() +
labs(x="Engine Size (L)",
y="City Fuel-Efficiency (MPG)",
color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() +
labs(x="Engine Size (L)",
y="City Fuel-Efficiency (MPG)",
color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() +
labs(x="Engine Size (L)",
y="City Fuel-Efficiency (MPG)",
color="Vehicle Class",
shape="Type of Drive") #add scatter plot with multiple aesthetics
?mpg
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,size=cty)) #import dataset into ggplot2
plt + geom_point() +
labs(x="Engine Size (L)",
y="City Fuel-Efficiency (MPG)",
color="Vehicle Class",
size="City Fuel-Efficiency (MPG)") #add scatter plot with multiple aesthetics
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
p
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
# add some color and using dotted instead of solid lines
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy,size=drv,linetype=dotted)) #import dataset into ggplot2
# add some color and using dotted instead of solid lines
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy,color=drv,linetype=dotted)) #import dataset into ggplot2
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(x="Manufacturer",
y="Hihgway Fuel-Efficiency (MPG)",
color="Drive") #add scatter plot with multiple aesthetics
# add some color and using dotted instead of solid lines
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy,color=drv)) #import dataset into ggplot2
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(x="Manufacturer",
y="Hihgway Fuel-Efficiency (MPG)",
color="Drive",label='dotted') #add scatter plot with multiple aesthetics
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(x="Manufacturer",
y="Hihgway Fuel-Efficiency (MPG)",
color="Drive",label=dotted) #add scatter plot with multiple aesthetics
plt + geom_boxplot(linetype = "dotted", color = "red") +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(x="Manufacturer",
y="Hihgway Fuel-Efficiency (MPG)",
color="Drive") #add scatter plot with multiple aesthetics
require(pacman)
library(pacman) # load package manager library to read json file
pacman::p_load(pacman,tidyverse,jsonlite,rio,plotly,dplyr)
library(datasets)  # Load/unload base packages manually
head(mpg) # mpg contains fuel economy for vehicles manufactured btw 1999 -2008
?mpg
mpg_summary <- mpg %>%
group_by(class,year) %>%
summarize(Mean_Hwy=mean(hwy),
.groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() +
labs(x="Vehicle Class",
y="Vehicle Year",
fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>%
group_by(model,year) %>%
summarize(Mean_Hwy=mean(hwy),
.groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
plt + geom_boxplot() + #add boxplottheme
(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplottheme
(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>%
group_by(class) %>%
summarize(Mean_Engine=mean(displ),
.groups = 'keep') #create summary table
View(mpg_summary)
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
View(plt)
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
mpg_summary <- mpg %>%
group_by(class) %>%
summarize(
Mean_Engine=mean(displ),
SD_Engine=sd(displ),
.groups = 'keep'
)
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_long <- mpg %>%
gather(
key="MPG_Type",
value="Rating",
c(cty,hwy)
) #convert to long format
pacman::p_load(pacman,tidyverse,jsonlite,rio,plotly,dplyr,tidyr)
mpg_long <- mpg %>%
gather(
key="MPG_Type",
value="Rating",
c(cty,hwy)
) #convert to long format
head(mpg_long)
mpg_long <- mpg %>%
gather(
key="MPG_Type",
value="Rating",
c(cty,hwy)
) #convert to long format
head(mpg_long)
# different vehicle fuel efficiency ratings by manufacturer
plt <- ggplot(mpg_long,
aes(x=manufacturer,
y=Rating,color=MPG_Type)
) #import dataset into ggplot2
plt +
geom_boxplot() +
theme(
axis.text.x=element_text(angle=45,hjust=1)
) #add boxplot with labels rotated 45 degrees
?facet_wrap()
plt <- ggplot(mpg_long,aes(
x=manufacturer,
y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() +
facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") +
xlab("Manufacturer") #rotate x-axis labels
View(mpg_long)
View(mpg_summary)
View(mpg_summary)
View(plt)
View(mpg_summary)
head(mpg)
View(mpg_long)
head(mpg_long)
plt <- ggplot(mpg_long,aes(
x=manufacturer,
y=Rating,color=drv)) #import dataset into ggplot2
plt + geom_boxplot() +
facet_wrap(vars(drv)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") +
xlab("drive") #rotate x-axis labels
plt <- ggplot(mpg_long,aes(
x=manufacturer,
y=Rating,
color=drv,
size=class)) #import dataset into ggplot2
plt + geom_boxplot() +
facet_wrap(vars(drv)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") +
xlab("drive") #rotate x-axis labels
plt <- ggplot(mpg_long,aes(
x=manufacturer,
y=Rating,
color=drv,
size=manufacturer)) #import dataset into ggplot2
plt + geom_boxplot() +
facet_wrap(vars(drv)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") +
xlab("drive") #rotate x-axis labels
plt + geom_boxplot() +
facet_wrap(vars(manufacturer)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") +
xlab("drive") #rotate x-axis labels
plt <- ggplot(mpg_long,aes(
x=manufacturer,
y=Rating,
color=displ,
size=Rating)) #import dataset into ggplot2
plt + geom_boxplot() +
facet_wrap(vars(Rating)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") +
xlab("drive") #rotate x-axis labels
plt <- ggplot(mpg_long,aes(
x=manufacturer,
y=Rating,
color=cyl,
size=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() +
facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") +
xlab("drive") #rotate x-axis labels
plt <- ggplot(mpg_long,aes(
x=manufacturer,
y=Rating,
color=cyl,
size=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() +
facet_wrap(vars(MPG_Type,drv)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") +
xlab("drive") #rotate x-axis labels
require(pacman)
library(pacman) # load package manager library to read json file
pacman::p_load(pacman,tidyverse,jsonlite,rio,plotly,dplyr,tidyr)
library(datasets)  # Load/unload base packages manually
require(pacman)
library(pacman) # load package manager library to read json file
pacman::p_load(pacman,tidyverse,jsonlite,rio,plotly,dplyr,tidyr)
library(datasets)  # Load/unload base packages manually
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
?shapiro.test()
shapiro.test(mtcars$wt)
?sample_n()
setwd("/Volumes/DIVS/DA practise/Module 15 R and Stats/R analysis/data_sources")
population_table <- read.csv('used_car_data.csv',
check.names = F,
stringsAsFactors = F) #import used car dataset
plt <- ggplot(
population_table,
aes(x=log10(Miles_Driven))
) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
t.test(log10(sample_table$Miles_Driven),
mu=mean(log10(population_table$Miles_Driven))
) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
t.test(log10(sample_table$Miles_Driven),
log10(sample_table2$Miles_Driven)) #compare means of two samples
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
## (ANOVA) test, which is used to compare the means of a
# continuous numerical variable across a number of groups
?aov()
View(mpg_1999)
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
View(mtcars_filt)
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
?cor()
?mtcars()
head(mtcars)
# test whether or not horsepower (hp) is correlated with quarter-mile race time (qsec)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Selling_Price,y=Miles_Driven)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(used_cars$Selling_Pric,used_cars$Miles_Driven) #calculate correlation coefficient
used_matrix <- as.matrix(
used_cars[,
c("Selling_Price","Present_Price","Miles_Driven")
]) #convert data frame into numeric matrix
cor(used_matrix)
?lm()
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() +
geom_line(
aes(y=yvals), color = "red"
) #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,mtcars) #generate multiple linear regression model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars))
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) %>% round(,2)
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) %>% round(2,)
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) %>% round()
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
?chisq.test()
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("/Volumes/DIVS/DA practise/Module 15 R and Stats/R analysis/MechaCar_Statistical_Analysis")
require(pacman)
library(pacman) # load package manager library to read json file
pacman::p_load(pacman,tidyverse,jsonlite,rio,plotly,dplyr,tidyr)
library(datasets)  # Load/unload base packages manually
mecha_mpg <- read.csv('MechaCar_mpg.csv') #import dataset
class(mecha_mpg)
head(mecha_mpg)
View(mecha_mpg)
mecha_reg <- lm(mpg ~ vehicle_length+vehicle_weight+spoiler_angle+ground_clearance+AWD,data=mecha_mpg) #generate multiple linear regression model
View(mecha_reg)
mecha_reg
summary(mecha_reg) #generate summary statistics
mecha_mpg <- read.csv('Resources/MechaCar_mpg.csv') #import dataset
class(mecha_mpg)
head(mecha_mpg)
mecha_reg <- lm(mpg ~ vehicle_length+vehicle_weight+spoiler_angle+ground_clearance+AWD,data=mecha_mpg) #generate multiple linear regression model
mecha_reg # variable holding multiple reg for mecha car
summary(mecha_reg) #generate summary statistics
mecha_SC <- read.csv('Resources/Suspension_Coil.csv') #import dataset
View(mecha_SC)
head(mecha_SC)
Mean = mean(mecha_SC$PSI)
Median=median(mecha_SC$PSI)
Variance=var(mecha_SC$PSI)
SD = sd(mecha_SC$PSI)
total_summary <- data.frame(Mean,Median,Variance,SD)
total_summary
View(total_summary)
lot_summary <-mecha_SC %>% group_by(Manufacturing_Lot) %>% summarise(
Mean=mean(PSI),
Median = median(PSI),
Variance = var(PSI),
SD = sd(PSI),
.groups = 'keep')
lot_summary
View(lot_summary)
lot_summary <-mecha_SC %>% group_by(Manufacturing_Lot) %>% summarise(
Mean,
Median,
Variance,
SD,
.groups = 'keep')
lot_summary
lot_summary <-mecha_SC %>% group_by(Manufacturing_Lot) %>% summarise(
Mean=mean(PSI),
Median = median(PSI),
Variance = var(PSI),
SD = sd(PSI),
.groups = 'keep')
lot_summary
View(lot_summary)
View(total_summary)
View(mecha_SC)
t.test(mecha_SC$PSI,mu=1500) #compare sample versus population means
t.test(mecha_SC,Manufacturing_Lot=='Lot1'$PSI ,mu=1500) #compare means of two samples
t.test(subset(mecha_SC,Manufacturing_Lot=='Lot1'$PSI) ,mu=1500) #compare means of two samples
t.test(subset(mecha_SC,Manufacturing_Lot=='Lot1')$PSI ,mu=1500) #compare means of two samples
t.test(mecha_SC$PSI,mu=1500) #compare sample versus population means
t.test(subset(mecha_SC,Manufacturing_Lot=='Lot1')$PSI ,mu=1500) #compare means of lot1 with samples
t.test(subset(mecha_SC,Manufacturing_Lot=='Lot2')$PSI ,mu=1500) #compare means of lot2 with samples
t.test(subset(mecha_SC,Manufacturing_Lot=='Lot3')$PSI ,mu=1500) #compare means of lot3 with samples
